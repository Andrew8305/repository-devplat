<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-4.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"
	default-autowire="byName">
	
	<bean id="dbAuthorizingService" class="org.cisiondata.modules.authentication.service.impl.DBAuthorizingServiceImpl">
		<!-- 如果用切面缓存代理了 此处就不缓存了 -->
		<property name ="authService" ref="authService"/>
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authorizationCachingEnabled" value="true" />
	</bean>
	
	<bean id="memoryCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />  

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="dbAuthorizingService" />
		<property name="cacheManager" ref="memoryCacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<!--  
		<property name="rememberMeManager" ref="rememberMeManager" />
		-->
	</bean>

	<!---cookie -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="${shiro.uid.cookie.name}" />
		<property name="domain" value="${shiro.uid.cookie.domain}" />
		<property name="path" value="${shiro.uid.cookie.path}" />
		<property name="httpOnly" value="${shiro.uid.cookie.httpOnly}" />
		<property name="maxAge" value="${shiro.uid.cookie.maxAge}" />
	</bean>
	
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="${shiro.uid.rememeberMe.cookie.name}" />
		<property name="domain" value="${shiro.uid.cookie.domain}" />
		<property name="path" value="${shiro.uid.cookie.path}" />
		<property name="httpOnly" value="${shiro.uid.cookie.httpOnly}" />
		<property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}" />
	</bean>
	
	<!-- uid(session id) 生成策略 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	
    <!-- 会话保持的DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" /> 
		<property name="cacheManager" ref="shiroCacheManager" /> 
	</bean>
    
    <bean id="onlineSessionDAO" class="org.cisiondata.modules.authentication.session.OnlineSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="activeSessionsCacheName" value="${shiro.active.session.cacheName}"/>
    </bean>

    <bean id="onlineSessionFactory" class="org.cisiondata.modules.authentication.session.OnlineSessionFactory"/>

	<!-- manager -->
	<!-- remembered vs authenticated http://www.ituring.com.cn/article/287 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('${shiro.uid.rememeberMe.cookie.base64.cipherKey}')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- cache manager -->
	<bean id="springEhCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" lazy-init="false">
		<property name="configLocation">
		    <value>classpath:shiro/shiro-ehcache.xml</value>
		</property>
		<property name = "cacheManagerName" value="shiro-activeSessionCache"></property>
	</bean>
	
	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="springEhCacheManager"/>
    </bean>
	
	<bean id="shiroCacheManager" class="org.cisiondata.modules.authentication.cache.CacheManagerWrapper">
		<property name="cacheManager" ref="springCacheManager" />
	</bean>

	<!-- 会话验证调度 -->
	<bean id="sessionValidationScheduler" class="org.cisiondata.modules.authentication.session.scheduler.SpringSessionValidationScheduler">
		<property name="sessionValidationInterval" value="${shiro.session.validation.interval}" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="scheduler" ref="scheduler" />
	</bean>
	
	<!-- 会话管理器 -->
	<bean id="onlineSessionManager" class="org.cisiondata.modules.authentication.session.manager.OnlineWebSessionManager">
		<property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}"></property>
		<property name="sessionFactory" ref="onlineSessionFactory" />
		<property name="sessionDAO" ref="onlineSessionDAO" />
		<property name="deleteInvalidSessions" value="false" />

		<property name="sessionValidationInterval" value="${shiro.session.globalSessionTimeout}" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />

		<property name="cacheManager" ref="shiroCacheManager" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">   
	   	<property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}" />  
	   	<property name="deleteInvalidSessions" value="false" />
	   	<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	   	<property name="sessionDAO" ref="sessionDAO"/> 
	</bean>
	
	<bean id="customSessionListener" class="org.cisiondata.modules.authentication.session.CustomSessionListener" />
	
	<!-- filter -->
	<!--替换默认的form 验证过滤器 -->
	<bean id="formAuthenticationFilter" class="org.cisiondata.modules.authentication.web.filter.UserFormAuthenticationFilter">
		<property name="userService" ref="userService" />
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="rememberMeParam" value="rememberMe" />
		<property name="defaultSuccessUrl" value="${shiro.default.success.url}" />
		<property name="adminDefaultSuccessUrl" value="${shiro.admin.default.success.url}" />
	</bean>

	<!-- 退出登录过滤器 -->
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="${shiro.logout.success.url}" />
	</bean>
	
	<!--提取系统用户（User） 验证用户是否合法的过滤器（如是否删除了 是否锁定了） -->
	<bean id="userAccessControlFilter" class="org.cisiondata.modules.authentication.web.filter.UserAccessControlFilter">
		<property name="authService" ref="authService"></property>
		<property name="userBlockedUrl" value="${shiro.user.blocked.url}" />
		<property name="userNotFoundUrl" value="${shiro.user.notfound.url}" />
		<property name="userUnknownErrorUrl" value="${shiro.user.unknown.error.url}" />
	</bean>
	
	<!-- 验证会话是否是强制退出等的filter -->
	<!--  
	<bean id="onlineSessionFilter" class="org.cision.modules.authentication.filter.OnlineSessionFilter">
		<property name="forceLogoutUrl" value="${shiro.user.force.logout.url}" />
		<property name="onlineSessionDAO" ref="onlineSessionDAO" />
	</bean>
	-->

	<bean id="jCaptchaValidateFilter" class="org.cisiondata.modules.authentication.web.filter.JCaptchaValidateFilter">
		<property name="jcaptchaEbabled" value="${shiro.jcaptcha.enable}" />
		<property name="jcaptchaParam" value="jcaptchaCode" />
		<property name="failureKeyAttribute" value="shiroLoginFailure"/>  
		<property name="jcapatchaErrorUrl" value="${shiro.jcaptcha.error.url}" />
	</bean>

	<!-- 同步当前会话数据到数据库 -->
	<!-- 	
	<bean id="syncOnlineSessionFilter" class="org.apache.shiro.web.filter.sync.SyncOnlineSessionFilter">
 		<property name="onlineSessionDAO" ref="onlineSessionDAO" />
 	</bean> 
	-->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="${shiro.login.url}" />
		<property name="unauthorizedUrl" value="${shiro.unauthorized.url}" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
				<entry key="logout" value-ref="logoutFilter" />
				<!--  
				<entry key="onlineSession" value-ref="onlineSessionFilter" />
				-->
				<entry key="userAccessControl" value-ref="userAccessControlFilter" />
				<entry key="jCaptchaValidate" value-ref="jCaptchaValidateFilter" />
				<!--  
				<entry key="syncOnlineSession" value-ref="syncOnlineSessionFilter" />
				-->
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/static/** = anon
				/img/** = anon
				/css/** = anon
				/js/** = anon
				/jcaptcha* = anon
				/ = authc
				/login = jCaptchaValidate,authc
				/logout = logout
				/** = userAccessControl
			</value>
		</property>
	</bean>


	<!-- aop and other -->
	<!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
	<!-- make the securityManager bean a static singleton. DO NOT do this in web -->
	<!-- applications - see the 'Web Applications' section below instead. -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!--   
             开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类 并在必要时进行安全逻辑验证  
    -->  
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean>
	
</beans>