<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.cisiondata</groupId>
	<artifactId>devplat-auth-shiro-proguard</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>DevPlat Shiro Project</name>
	<url>http://maven.apache.org</url>

	<repositories>
		<repository>
			<id>public</id>
			<name>public repository</name>
			<url>http://192.168.0.115:8081/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	
	<pluginRepositories>
		<pluginRepository>
			<id>public</id>
			<name>public repository</name>
			<url>http://192.168.0.115:8081/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<shiro.version>1.3.2</shiro.version>
		<jcaptcha.version>2.0-alpha-1</jcaptcha.version> 
	</properties>

	<dependencies>
		<!--DevPlat Common依赖包 -->
		<dependency>
			<groupId>org.cisiondata</groupId>
			<artifactId>devplat-common</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		
		<!-- SHIRO依赖包 -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-all</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-cas</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>1.3.1</version>
		</dependency>
		
		<dependency>  
		    <groupId>org.apache.shiro</groupId>  
		    <artifactId>shiro-ehcache</artifactId>  
		    <version>${shiro.version}</version>  
		</dependency>   
		
		<!-- Jcaptcha依赖包 -->
		<dependency>
			<groupId>com.octo.captcha</groupId>
			<artifactId>jcaptcha</artifactId>
			<version>${jcaptcha.version}</version>
		</dependency>
		
		<dependency>
			<groupId>com.octo.captcha</groupId>
			<artifactId>jcaptcha-integration-simple-servlet</artifactId>
			<version>${jcaptcha.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>servlet-api</artifactId>
					<groupId>javax.servlet</groupId>
				</exclusion>
			</exclusions>
		</dependency> 
		
		<!-- Servlet依赖包 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.4</version>
			<scope>provided</scope>
		</dependency>
		
	</dependencies>
	
	<build>
		<finalName>devplat-auth-shiro-proguard</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<defaultGoal>install</defaultGoal>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>maven</groupId>
				<artifactId>maven-test-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- War Maven Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<webappDirectory>src/main/webapp</webappDirectory>
					<warSourceDirectory>target/devplat</warSourceDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>1.3.2</version>
				<configuration>
					<verbose>true</verbose>
					<overwrite>true</overwrite>
				</configuration>
			</plugin>
			<!--  
			<plugin>  
	            <groupId>com.github.wvengen</groupId>  
	            <artifactId>proguard-maven-plugin</artifactId>  
	            <executions>  
	                <execution>  
	                    <phase>package</phase>  
	                    <goals>  
	                        <goal>proguard</goal>  
	                    </goals>  
	                </execution>  
	            </executions>  
	            <configuration>  
	                <obfuscate>true</obfuscate>  
	                <proguardInclude>${basedir}/proguard.conf</proguardInclude>  
	                <libs>                           
	                    <lib>${JAVA_HOME}/lib/rt.jar</lib>  
	                </libs>  
	                <addMavenDescriptor>false</addMavenDescriptor>  
	            </configuration>  
	            <dependencies>   
	                <dependency>  
	                    <groupId>net.sf.proguard</groupId>  
	                    <artifactId>proguard</artifactId>  
	                    <version>4.8</version>  
	                    <scope>runtime</scope>  
	                </dependency>  
	            </dependencies>  
        	</plugin>   
        	-->
        	<!-- ProGuard混淆插件-->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.0.11</version>
                <executions>
                    <execution>
                        <!-- 混淆时刻，这里是打包的时候混淆-->
                        <phase>package</phase>
                        <goals>
                            <!-- 使用插件的什么功能，当然是混淆-->
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 是否将生成的PG文件安装部署-->
                    <attach>true</attach>
                    <!-- 是否混淆-->
                    <obfuscate>true</obfuscate>
                    <!-- 指定生成文件分类 -->
                    <attachArtifactClassifier>pg</attachArtifactClassifier>
                    <options>
                        <!-- JDK目标版本1.8-->
                        <option>-target 1.8</option>
                        <!-- 不做收缩（删除注释、未被引用代码）-->
                        <option>-dontshrink</option>
                        <!-- 不做优化（变更代码实现逻辑）-->
                        <option>-dontoptimize</option>
                        <!-- 不路过非公用类文件及成员-->
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
                        <option>-allowaccessmodification</option>
                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
                        <option>-useuniqueclassmembernames</option>
                        <!-- 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名-->
                        <option>-keeppackagenames</option>
                        <!-- 不混淆所有特殊的类-->
                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>
                        <!-- 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射-->
                        <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>

                        <!-- 不混淆job包下的所有类名，且类中的方法也不混淆-->
                        <option>-keep class org.cisiondata.modules.auth.web.job.** { &lt;methods&gt;; }</option>
                        <!-- 不混淆filter包下的所有类名，这里主要是对Shiro的路踢人过滤器混淆，对类的属性和方法进行了混淆-->
                        <option>-keep class org.cisiondata.modules.auth.web.filter.** </option>
                        <!-- 不混淆凭证包下的所有类名，但对类中的属性、方法进行混淆，原因是Spring配置中用到了这个类名-->
                        <option>-keep class org.cisiondata.modules.auth.web.credntials.** </option>
                        <!-- 混淆目的同上，这个是拦截器的包，包中有防止重复提交的拦截器-->
                        <option>-keep class org.cisiondata.modules.auth.web.interceptor.** </option>
                        <!-- 混淆目的同上，这个是域包，包中有用户登录域-->
                        <option>-keep class org.cisiondata.modules.auth.web.realm.** </option>
                        <!-- 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别-->
                        <option>-keep class org.cisiondata.modules.auth.entity.** {*;}</option>
                        <!-- 以下两个包因为大部分是Spring管理的Bean，不对包类的类名进行混淆，但对类中的属性和方法混淆-->
                        <option>-keep class org.cisiondata.modules.auth.service.** </option>
                        <option>-keep class org.cisiondata.modules.auth.dao.**</option>
                    </options>
                    <outjar>${project.build.finalName}-pg.jar</outjar>
                    <!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
                    <libs>
                        <lib>${java.home}/lib/rt.jar</lib>
                    </libs>
                    <!-- 加载文件的过滤器，就是你的工程目录了-->
                    <inFilter>org/cisiondata/**</inFilter>
                    <!-- 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧-->
                    <injar>classes</injar>
                    <!-- 输出目录-->
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
                <dependencies>
                	<dependency>
					    <groupId>net.sf.proguard</groupId>
					    <artifactId>proguard-base</artifactId>
					    <version>5.2.1</version>
					</dependency>
                </dependencies>
            </plugin>
		</plugins>

	</build>
	
	<distributionManagement>
		<repository>  
            <id>user-release</id>  
            <name>User Project Release</name>  
            <url>http://192.168.0.115:8081/nexus/content/repositories/releases/</url>  
        </repository>  
  
        <snapshotRepository>  
            <id>user-snapshots</id>  
            <name>User Project SNAPSHOTS</name>  
            <url>http://192.168.0.115:8081/nexus/content/repositories/snapshots/</url>  
        </snapshotRepository>  
	</distributionManagement>
	
</project>
